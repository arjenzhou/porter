group "$porterGroup"
version "$porterVersion"

wrapper.gradleVersion = "$gradleWrapper"

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply from: rootDir.path + '/config/checkstyle/checkstyle.gradle'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
}

subprojects {
    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter"
        testImplementation "org.mockito:mockito-core:$mockito"
        testImplementation "org.slf4j:slf4j-simple:$slf4j"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter"
    }

    test.useJUnitPlatform()

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        options.addStringOption("charset", "UTF-8")
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    publishing {
        publications {
            "$project.name"(MavenPublication) {
                groupId = "$porterGroup"
                artifactId = "$porterArtifact-$project.name"
                version = "$porterVersion"
                from components.java
                pom {
                    name = "$porterArtifact-$project.name"
                    description = "porter $project.name module"
                    url = 'https://github.com/arjenzhou/porter'
                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://github.com/arjenzhou/porter/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'arjenzhou'
                            name = 'Zhou Yang'
                            email = 'zhouyang.zy@outlook.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:arjenzhou/porter.git'
                        developerConnection = 'scm:git:git@github.com:arjenzhou/porter.git'
                        url = 'https://github.com/arjenzhou/porter'
                    }
                }
            }
        }

        repositories {
            maven {
                name = "OSSRH"
                if ("$porterVersion".endsWith("-SNAPSHOT")) {
                    url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                }
                credentials {
                    username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }

    signing {
        sign(publishing.publications."$project.name")
    }
}

task codeCoverageReport(type: JacocoReport) {
    dependsOn subprojects.test

    executionData.from project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
    additionalSourceDirs.from files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from files(subprojects.sourceSets.main.output)

    reports.xml.required = true
}
